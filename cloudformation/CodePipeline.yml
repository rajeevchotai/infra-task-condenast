AWSTemplateFormatVersion: 2010-09-09
Description: The CloudFormation template for the CodePipeline.

Parameters:
  Stage:
    Type: String
    Description: In order to make the Cloudformation template compatible 
      for multiple stages (Dev, QA or any other), all resources
      defined in the template will have their name combined with 
      stage name and AWS account Id appended to make sure the uniqueness of the resource.
    Default: dev
  GithubUserName:
    Type: String
    Description: Owner of the Github repository containing the Hello World code.
    Default: rajeevchotai
  GithubRepo:
    Type: String
    Description: Github repository containing the Hello World code.
    Default: infra-task-condenast
  GithubBranch:
    Type: String
    Description: The branch containing the Hello World code.
    Default: master
  GithubOAuthToken:
    Type: String
    Description: The Oauth token for the user containing the Hello World code.
  ContainerPort:
    Type: Number
    Description: The Port for accessing the Hello World application.
    Default: 8080

Resources:

  # Create an ECR Repository to store docker images
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 'ecr-repository']]

  # Create an S3 Bucket to store build artifacts
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 's3bucket']]
         
  # Custom Resource to cleanup S3 Bucket on deletion
  CleanupBucketOnDelete:
    Type: Custom::CleanupBucket
    DependsOn: S3Bucket
    Properties:
      ServiceToken: !GetAtt 'CleanupBucketFunction.Arn'
      BucketName: !Ref S3Bucket

  DeleteRepository:
    Type: Custom::DeleteRepository
    DependsOn: ECRRepository
    Properties:
      ServiceToken: !GetAtt DeleteRepositoryFunction.Arn
      RegistryId: !Ref AWS::AccountId
      RepositoryName: !Ref ECRRepository


  # Role for lambda function to allow cleanup of S3 bucket on delete
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: 
            - arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - s3:ListBucket
            Resource: !GetAtt S3Bucket.Arn
          - Effect: Allow
            Action:
            - s3:DeleteObject
            Resource: !Sub "${S3Bucket.Arn}/*"   
          - Effect: Allow
            Action:
            - ecr:DeleteRepository
            Resource: 
            - !GetAtt 'ECRRepository.Arn'                        

  # Lambda Function to empty S3 bucket on delete
  CleanupBucketFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.7
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Handler: index.handler   
      Timeout: 25
      Description: Invoke a function during stack deletion to cleanup S3 bucket.    
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          from botocore.vendored import requests
          def handler(event, context): 
            try: 
              bucket = event['ResourceProperties']['BucketName'] 
              if event['RequestType'] == 'Delete':            
                s3 = boto3.resource('s3')            
                bucket = s3.Bucket(bucket)            
                for obj in bucket.objects.filter():                
                  s3.Object(bucket.name, obj.key).delete()                         
            except Exception as e:        
              print(e)        
              cfnresponse.send(event, context, cfnresponse.FAILED, None, 'CleanupBucketFunction') 
            cfnresponse.send(event, context, cfnresponse.SUCCESS, None, 'CleanupBucketFunction')                
    DependsOn: S3Bucket


  DeleteRepositoryFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.7
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Handler: index.handler   
      Timeout: 25
      Description: Invoke a function during stack deletion to cleanup ECR Repository.    
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          from botocore.vendored import requests
          def handler(event, context): 
            try: 
              ecr = boto3.client('ecr')
              if event['RequestType'] == 'Delete':            
                response = ecr.delete_repository(
                registryId=event['ResourceProperties']['RegistryId'],
                repositoryName=event['ResourceProperties']['RepositoryName'],
                force=True)                       
            except Exception as e:        
              print(e)        
              cfnresponse.send(event, context, cfnresponse.FAILED, None, 'DeleteRepositoryFunction') 
            cfnresponse.send(event, context, cfnresponse.SUCCESS, None, 'DeleteRepositoryFunction')                
    DependsOn: ECRRepository
      
  # Create Access Role for CodePipeLine
  CodePipeLineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  # Create Access Role for CodeBuild
  CodeBuildExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  # Create Access Role for Cloudformation
  CloudformationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  # Create the BuildProject with required Build information
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties: 
      Artifacts: 
        Type: CODEPIPELINE
      Environment: 
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: True
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: ECR_REPOSITORY_URI
            Value: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ "/", [ "amazonaws.com", !Ref "ECRRepository" ] ] ] ]
      Name: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 'BuildProject']]
      ServiceRole: !Ref CodeBuildExecutionRole
      Source:
        Type: CODEPIPELINE
        # This file (buildspec.yml In Source code) contains commands to Create and Push a docker image to the ECR_REPOSITORY_URI
        BuildSpec: aws-hello-world/buildspec.yml

  # Create CodePipeline with 3 stages (Source, Build and Deploy)
  CodePipeLine:
    Type: AWS::CodePipeline::Pipeline
    DependsOn: S3Bucket
    Properties: 
      ArtifactStore: 
        Location: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 's3bucket']]
        Type: S3
      Name: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 'CodePipeLine']]
      RestartExecutionOnUpdate: False
      RoleArn: 
        Fn::GetAtt: [ CodePipeLineExecutionRole, Arn ]
        
      Stages:

        # Download source code from Github Repo to source-output-artifacts path in S3 Bucket
        - Name: Source
          Actions: 
          - Name: Source
            ActionTypeId: 
              Category: Source
              Owner: ThirdParty
              Provider: GitHub
              Version: 1
            Configuration:
              Repo: !Ref GithubRepo
              Branch: !Ref GithubBranch
              Owner: !Ref GithubUserName
              OAuthToken: !Ref GithubOAuthToken
            RunOrder: 1
            OutputArtifacts:
              - Name: source-output-artifacts
        
        # Build the project using the BuildProject and Output build artifacts to build-output-artifacts path in S3 Bucket
        - Name: Build
          Actions:
          - Name: Build
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            OutputArtifacts:
              - Name: build-output-artifacts
            InputArtifacts:
              - Name: source-output-artifacts
            Configuration:
                ProjectName: !Ref BuildProject
            RunOrder: 1

        # Deploy the project by executing Fargate-Cluster.yml file in the Source code with Cloudformation.
        - Name: Deploy
          Actions:
          - Name: Deploy
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: 1
              Provider: CloudFormation
            InputArtifacts:
              - Name: source-output-artifacts
              - Name: build-output-artifacts
            Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM
                # Pass parameter values to Fargate-Cluster.yml for deployment
                ParameterOverrides: !Sub |
                  {
                    "ImageURI" : { "Fn::GetParam" : ["build-output-artifacts", "aws-hello-world/imageDetail.json", "ImageURI"] },
                    "Stage":  "${Stage}",
                    "ContainerPort": "${ContainerPort}"
                  }
                RoleArn: 
                  Fn::GetAtt: [ CloudformationExecutionRole, Arn ]
                StackName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 'FargateECSCluster']]
                TemplatePath: source-output-artifacts::cloudformation/Fargate-Cluster.yml
            RunOrder: 1